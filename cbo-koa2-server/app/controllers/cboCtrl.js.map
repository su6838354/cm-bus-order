{"version":3,"sources":["../../src/controllers/cboCtrl.js"],"names":["addOrder","ctx","next","params","request","body","order_date","order_path","order_station","order_class","order_ticket_count","order_owner","order_mobile","order_schedules_id","status","create_time","Date","now","sql","console","log","res","code","message","data","sendCode","mobile","sms","sendSms","login","username","yanzhema","checkOk","list_search","limit","pageIndex","where","where_sql","first","item","value","count","list_by_mobile"],"mappings":"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","file":"cboCtrl.js","sourcesContent":["/**\n * Created by pdd on 2018/6/10.\n */\n\nimport {query} from '../models/db_connection';\nimport { pagination, getLinuxTimeStamp} from '../uitil';\n\nimport sms from '../sms';\n\n/**\n * 添加报名\n * @param {*} ctx\n * @param {*} next\n */\nconst addOrder = async(ctx, next) => {\n    const params = ctx.request.body;\n    const {\n        order_date,\n        order_path,\n        order_station,\n        order_class,\n        order_ticket_count,\n        order_owner,\n        order_mobile,\n        order_schedules_id,\n        status\n    } = params;\n    const create_time = Date.now()/1000;\n    const sql = `INSERT INTO cbo_order VALUES (NULL, '${order_owner}', '${order_mobile}', '${order_date}',\n              '${order_path}', '${order_station}', '${create_time}', '${order_ticket_count}', '${order_class}', \n              '${order_schedules_id}', '${status}')`;\n    console.log('add cbo_order sql:', sql);\n    const res = await query(sql);\n    ctx.body = {code: 0, message: 'success', data: res}\n}\n\nconst sendCode = async(ctx, next) => {\n    const params = ctx.request.body;\n    const { mobile } = params;\n    sms.sendSms(mobile);\n    ctx.body = {code: 0, message: 'success', data: '验证码发生成功'}\n}\n\n\nconst login = async(ctx, next) => {\n    const params = ctx.request.body;\n    const { mobile, username, yanzhema } = params;\n    if (sms.checkOk(mobile, yanzhema)) {\n        ctx.body = {code: 0, message: '登录成功', data: '登录成功'}\n    } else {\n        ctx.body = {code: 1001, message: '验证码错误', data: '验证码错误'}\n    }\n}\n\n/**\n * 获取活动列表\n * @param {*} ctx\n * @param {*} next\n */\n// const list = async (ctx, next) => {\n//     const params = ctx.request.body;\n//     const {order_path, order_date, order_station, order_class} = params;\n//     const sql = 'select * from cbo_order where admin_id=? and is_show=1 ORDER BY seq desc limit ?,?';\n//     let data = await query(sql, [admin_id, (pageIndex-1)*limit, limit]);\n//     let count = await query('select count(*) as count from hw_activity where admin_id=? and is_show=1', [admin_id]);\n//     // let join_count = await query('select count(*) as count from hw_join where activity_id=?', [data])\n//     data = data.map(item=>{\n//         if(item.registrate_end_time < moment().unix()){\n//             item.status = 'time_out';\n//         }\n//         if(item.limit_num<=item.cur_num){\n//             item.status = 'full';\n//         }\n//         return item;\n//     });\n//\n//     ctx.body = Object.assign({code: 0, message: 'success', 'data': data}, pagination(limit, pageIndex, count[0].count));\n// }\n\n\n/**\n * 管理后台使用\n * @param {*} ctx\n * @param {*} next\n */\nconst list_search = async (ctx, next) => {\n    const params = ctx.request.body\n    const {order_path, order_date, order_station, order_class} = params;\n    const {limit=1000, pageIndex=1 } = params;\n    const where = {}\n\n    if (order_path) {\n        where['order_path'] = order_path\n    }\n\n    if (order_date) {\n        where['order_date'] = order_date\n    }\n\n    if (order_station) {\n        where['order_station'] = order_station\n    }\n\n    if (order_class) {\n        where['order_class'] = order_class\n    }\n\n\n    let where_sql = ''\n    let first = true\n    for (let item in where) {\n        const value = where[item]\n        if (first) {\n            where_sql = `where A.${item} like \"%${value}%\"`\n            first = false\n        }\n        else {\n            where_sql = `${where_sql} and A.${item} like \"%${value}%\"`\n        }\n    }\n\n    const sql = `select * from cbo_order as A ${where_sql} limit ${(pageIndex - 1) * limit},${limit}`\n\n    console.log('cbo_order list sql:', sql)\n    let data = await query(sql)\n    let count = await query(`select count(*) as count from cbo_order as A ${where_sql}`)\n\n    ctx.body = Object.assign({code: 0, message: 'success', 'data': data}, pagination(limit, pageIndex, count[0].count))\n}\n\n\nconst list_by_mobile = async (ctx, next) => {\n    const params = ctx.request.body\n    const {mobile} = params;\n    const sql = `select * from cbo_order where order_mobile=\"${mobile}\" order by create_time desc`;\n    const res = await query(sql);\n    ctx.body = {code: 0, message: 'success', data: res}\n}\n\nexport default {\n    addOrder,\n    sendCode,\n    login,\n    list_search,\n    list_by_mobile,\n}"]}